package com.example.chivas.dbres.db.greendao.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BILL_DES".
*/
public class BillDesDao extends AbstractDao<BillDes, Long> {

    public static final String TABLENAME = "BILL_DES";

    /**
     * Properties of entity BillDes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property BillNo = new Property(1, String.class, "billNo", false, "BILL_NO");
        public final static Property Des = new Property(2, String.class, "des", false, "DES");
    }


    public BillDesDao(DaoConfig config) {
        super(config);
    }
    
    public BillDesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BILL_DES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"BILL_NO\" TEXT," + // 1: billNo
                "\"DES\" TEXT);"); // 2: des
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BILL_DES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BillDes entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String billNo = entity.getBillNo();
        if (billNo != null) {
            stmt.bindString(2, billNo);
        }
 
        String des = entity.getDes();
        if (des != null) {
            stmt.bindString(3, des);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BillDes entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String billNo = entity.getBillNo();
        if (billNo != null) {
            stmt.bindString(2, billNo);
        }
 
        String des = entity.getDes();
        if (des != null) {
            stmt.bindString(3, des);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BillDes readEntity(Cursor cursor, int offset) {
        BillDes entity = new BillDes( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // billNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // des
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BillDes entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBillNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDes(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BillDes entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BillDes entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BillDes entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
